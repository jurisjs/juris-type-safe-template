{
	"Juris Component Template": {
		"prefix": "jcomp",
		"body": [
			"/**",
			" * @param {Object} props",
			" * @param {JurisContextBase} context",
			" * @returns {JurisVDOMElement}",
			" */",
			"const ${1:ComponentName} = (props, context) => {",
			"    const { getState, setState } = context;",
			"    ",
			"    return {",
			"        ${2:div}: {",
			"            className: '${3:container}',",
			"            children: [",
			"                $4",
			"            ]",
			"        }, //${2:div}.${3:container}",
			"    };",
			"};"
		],
		"description": "Complete Juris component template with JSDoc"
	},
	"Juris Component with Lifecycle": {
		"prefix": "jcomplife",
		"body": [
			"/**",
			" * @param {Object} props",
			" * @param {JurisContextBase} context",
			" * @returns {JurisLifecycleComponent}",
			" */",
			"const ${1:ComponentName} = (props, context) => {",
			"    const { getState, setState } = context;",
			"    ",
			"    return {",
			"        render: () => ({",
			"            ${2:div}: {",
			"                className: '${3:container}',",
			"                children: [",
			"                    $4",
			"                ]",
			"            }, //${2:div}.${3:container}",
			"        }),",
			"        hooks: {",
			"            onMount: () => {",
			"                ${5:// Component mounted}",
			"            },",
			"            onUpdate: (oldProps, newProps) => {",
			"                ${6:// Component updated}",
			"            },",
			"            onUnmount: () => {",
			"                ${7:// Component unmounted}",
			"            }",
			"        }",
			"    };",
			"};"
		],
		"description": "Juris component with lifecycle hooks and JSDoc"
	},
	"Juris Headless Component": {
		"prefix": "jheadless",
		"body": [
			"/**",
			" * @param {Object} props",
			" * @param {JurisContextBase} context",
			" * @returns {HeadlessComponent}",
			" */",
			"const ${1:HeadlessComponent} = (props, context) => {",
			"    const { getState, setState } = context;",
			"    ",
			"    return {",
			"        api: {",
			"            ${2:methodName}: () => {",
			"                ${3:// API method}",
			"            }",
			"        },",
			"        hooks: {",
			"            onRegister: () => {",
			"                ${4:// Component registered}",
			"            },",
			"            onUnregister: () => {",
			"                ${5:// Component unregistered}",
			"            }",
			"        }",
			"    };",
			"};"
		],
		"description": "Headless component with API, hooks and JSDoc"
	},
	"Juris Typed Component": {
		"prefix": "jcomptyped",
		"body": [
			"/**",
			" * @typedef {Object} ${1:ComponentName}Props",
			" * @property {string} ${2:title} - The component title",
			" * @property {number} [${3:count}] - Optional count value",
			" */",
			"",
			"/**",
			" * @param {${1:ComponentName}Props} props",
			" * @param {JurisContextBase} context",
			" * @returns {JurisVDOMElement}",
			" */",
			"const ${1:ComponentName} = (props, context) => {",
			"    const { getState, setState } = context;",
			"    const { ${2:title}, ${3:count} = 0 } = props;",
			"    ",
			"    return {",
			"        ${4:div}: {",
			"            className: '${5:container}',",
			"            children: [",
			"                {h1: {text: ${2:title}}}, //h1",
			"                {p: {text: `Count: ${${3:count}}`}}, //p",
			"            ]",
			"        }, //${4:div}.${5:container}",
			"    };",
			"};"
		],
		"description": "Strongly typed Juris component with JSDoc typedef"
	},
	"Juris Enhancement Basic": {
		"prefix": "jenhan",
		"body": [
			"juris.enhance('${1:.selector}', {",
			"    ${2:text}: '${3:Enhanced text}',",
			"    ${4:onClick}: () => {",
			"        ${5:// Enhancement logic}",
			"    }",
			"});"
		],
		"description": "Basic DOM enhancement"
	},
	"Juris Enhancement with Selectors": {
		"prefix": "jenhansel",
		"body": [
			"juris.enhance('${1:.container}', {",
			"    className: '${2:enhanced-container}',",
			"    selectors: {",
			"        '${3:.button}': {",
			"            ${4:text}: '${5:Enhanced Button}',",
			"            ${6:onClick}: () => {",
			"                ${7:// Button enhancement}",
			"            }",
			"        },",
			"        '${8:.input}': {",
			"            ${9:placeholder}: '${10:Enhanced placeholder}',",
			"            ${11:onInput}: (e) => {",
			"                ${12:// Input enhancement}",
			"            }",
			"        }",
			"    }",
			"});"
		],
		"description": "Enhancement with nested selectors"
	},
	"Juris Enhancement Function": {
		"prefix": "jenhanfn",
		"body": [
			"juris.enhance('${1:.selector}', (context) => {",
			"    const { getState, setState } = context;",
			"    ",
			"    return {",
			"        ${2:text}: () => getState('${3:textPath}'),",
			"        ${4:onClick}: () => {",
			"            ${5:// Dynamic enhancement}",
			"        }",
			"    };",
			"});"
		],
		"description": "Enhancement with function and reactive props"
	},
	"Juris Div Container": {
		"prefix": "jdiv",
		"body": [
			"{div: {",
			"    className: '${1:container}',",
			"    children: [",
			"        $2",
			"    ]",
			"}}, //div.${1:container}"
		],
		"description": "Div container with className"
	},
	"Juris Div with ClassName": {
		"prefix": "jdiv.",
		"body": [
			"{div: {",
			"    className: '${1:container}',",
			"    children: [",
			"        ${2}",
			"    ]",
			"}}, //div.${1:container}"
		],
		"description": "Div with className (use jdiv.classname)"
	},
	"Juris Div with ID": {
		"prefix": "jdiv#",
		"body": [
			"{div: {",
			"    id: '${1:myId}',",
			"    children: [",
			"        ${2}",
			"    ]",
			"}}, //div#${1:myId}"
		],
		"description": "Div with ID (use jdiv#idname)"
	},
	"Juris Section": {
		"prefix": "jsection",
		"body": [
			"{section: {",
			"    className: '${1:section}',",
			"    children: [",
			"        $2",
			"    ]",
			"}}, //section.${1:section}"
		],
		"description": "Section element with className"
	},
	"Juris Section with ClassName": {
		"prefix": "jsection.",
		"body": [
			"{section: {",
			"    className: '${1:hero}',",
			"    children: [",
			"        ${2}",
			"    ]",
			"}}, //section.${1:hero}"
		],
		"description": "Section with className (use jsection.classname)"
	},
	"Juris Section with ID": {
		"prefix": "jsection#",
		"body": [
			"{section: {",
			"    id: '${1:sectionId}',",
			"    children: [",
			"        ${2}",
			"    ]",
			"}}, //section#${1:sectionId}"
		],
		"description": "Section with ID (use jsection#idname)"
	},
	"Juris Article": {
		"prefix": "jarticle",
		"body": [
			"{article: {",
			"    className: '${1:article}',",
			"    children: [",
			"        $2",
			"    ]",
			"}}, //article.${1:article}"
		],
		"description": "Article element with className"
	},
	"Juris Article with ClassName": {
		"prefix": "jarticle.",
		"body": [
			"{article: {",
			"    className: '${1:post}',",
			"    children: [",
			"        ${2}",
			"    ]",
			"}}, //article.${1:post}"
		],
		"description": "Article with className (use jarticle.classname)"
	},
	"Juris Article with ID": {
		"prefix": "jarticle#",
		"body": [
			"{article: {",
			"    id: '${1:articleId}',",
			"    children: [",
			"        ${2}",
			"    ]",
			"}}, //article#${1:articleId}"
		],
		"description": "Article with ID (use jarticle#idname)"
	},
	"Juris Header": {
		"prefix": "jheader",
		"body": [
			"{header: {",
			"    className: '${1:header}',",
			"    children: [",
			"        $2",
			"    ]",
			"}}, //header.${1:header}"
		],
		"description": "Header element with className"
	},
	"Juris Header with ClassName": {
		"prefix": "jheader.",
		"body": [
			"{header: {",
			"    className: '${1:main-header}',",
			"    children: [",
			"        ${2}",
			"    ]",
			"}}, //header.${1:main-header}"
		],
		"description": "Header with className (use jheader.classname)"
	},
	"Juris Header with ID": {
		"prefix": "jheader#",
		"body": [
			"{header: {",
			"    id: '${1:pageHeader}',",
			"    children: [",
			"        ${2}",
			"    ]",
			"}}, //header#${1:pageHeader}"
		],
		"description": "Header with ID (use jheader#idname)"
	},
	"Juris Footer": {
		"prefix": "jfooter",
		"body": [
			"{footer: {",
			"    className: '${1:footer}',",
			"    children: [",
			"        $2",
			"    ]",
			"}}, //footer.${1:footer}"
		],
		"description": "Footer element with className"
	},
	"Juris Footer with ClassName": {
		"prefix": "jfooter.",
		"body": [
			"{footer: {",
			"    className: '${1:main-footer}',",
			"    children: [",
			"        ${2}",
			"    ]",
			"}}, //footer.${1:main-footer}"
		],
		"description": "Footer with className (use jfooter.classname)"
	},
	"Juris Footer with ID": {
		"prefix": "jfooter#",
		"body": [
			"{footer: {",
			"    id: '${1:pageFooter}',",
			"    children: [",
			"        ${2}",
			"    ]",
			"}}, //footer#${1:pageFooter}"
		],
		"description": "Footer with ID (use jfooter#idname)"
	},
	"Juris Navigation": {
		"prefix": "jnav",
		"body": [
			"{nav: {",
			"    className: '${1:navigation}',",
			"    children: [",
			"        $2",
			"    ]",
			"}}, //nav.${1:navigation}"
		],
		"description": "Navigation element with className"
	},
	"Juris Nav with ClassName": {
		"prefix": "jnav.",
		"body": [
			"{nav: {",
			"    className: '${1:navigation}',",
			"    children: [",
			"        ${2}",
			"    ]",
			"}}, //nav.${1:navigation}"
		],
		"description": "Navigation with className (use jnav.classname)"
	},
	"Juris Nav with ID": {
		"prefix": "jnav#",
		"body": [
			"{nav: {",
			"    id: '${1:mainNav}',",
			"    children: [",
			"        ${2}",
			"    ]",
			"}}, //nav#${1:mainNav}"
		],
		"description": "Navigation with ID (use jnav#idname)"
	},
	"Juris Main": {
		"prefix": "jmain",
		"body": [
			"{main: {",
			"    className: '${1:main}',",
			"    children: [",
			"        $2",
			"    ]",
			"}}, //main.${1:main}"
		],
		"description": "Main element with className"
	},
	"Juris Main with ClassName": {
		"prefix": "jmain.",
		"body": [
			"{main: {",
			"    className: '${1:content}',",
			"    children: [",
			"        ${2}",
			"    ]",
			"}}, //main.${1:content}"
		],
		"description": "Main with className (use jmain.classname)"
	},
	"Juris Main with ID": {
		"prefix": "jmain#",
		"body": [
			"{main: {",
			"    id: '${1:mainContent}',",
			"    children: [",
			"        ${2}",
			"    ]",
			"}}, //main#${1:mainContent}"
		],
		"description": "Main with ID (use jmain#idname)"
	},
	"Juris Aside": {
		"prefix": "jaside",
		"body": [
			"{aside: {",
			"    className: '${1:sidebar}',",
			"    children: [",
			"        $2",
			"    ]",
			"}}, //aside.${1:sidebar}"
		],
		"description": "Aside element with className"
	},
	"Juris Aside with ClassName": {
		"prefix": "jaside.",
		"body": [
			"{aside: {",
			"    className: '${1:sidebar}',",
			"    children: [",
			"        ${2}",
			"    ]",
			"}}, //aside.${1:sidebar}"
		],
		"description": "Aside with className (use jaside.classname)"
	},
	"Juris Aside with ID": {
		"prefix": "jaside#",
		"body": [
			"{aside: {",
			"    id: '${1:sidebar}',",
			"    children: [",
			"        ${2}",
			"    ]",
			"}}, //aside#${1:sidebar}"
		],
		"description": "Aside with ID (use jaside#idname)"
	},
	"Juris Button": {
		"prefix": "jbtn",
		"body": [
			"{button: {text: '${1:Button Text}', onClick: () => ${2:handleClick()}}}, //button"
		],
		"description": "Button with click handler"
	},
	"Juris Button with ClassName": {
		"prefix": "jbtn.",
		"body": [
			"{button: {",
			"    className: '${1:primary}',",
			"    text: '${2:Button}',",
			"    onClick: () => ${3:handleClick()}",
			"}}, //button.${1:primary}"
		],
		"description": "Button with className (use jbtn.classname)"
	},
	"Juris Button with ID": {
		"prefix": "jbtn#",
		"body": [
			"{button: {",
			"    id: '${1:submitBtn}',",
			"    text: '${2:Submit}',",
			"    onClick: () => ${3:handleSubmit()}",
			"}}, //button#${1:submitBtn}"
		],
		"description": "Button with ID (use jbtn#idname)"
	},
	"Juris Button with State": {
		"prefix": "jbtns",
		"body": [
			"{button: {text: '${1:Button Text}', onClick: () => setState('${2:statePath}', ${3:value})}}, //button"
		],
		"description": "Button with setState"
	},
	"Juris Button Reactive": {
		"prefix": "jbtnr",
		"body": [
			"{button: {",
			"    text: () => getState('${1:buttonText}'),",
			"    disabled: () => getState('${2:isDisabled}'),",
			"    onClick: () => setState('${3:statePath}', ${4:value})",
			"}}, //button"
		],
		"description": "Reactive button with dynamic text and disabled state"
	},
	"Juris Input Text": {
		"prefix": "jinput",
		"body": [
			"{input: {",
			"    type: '${1:text}',",
			"    value: () => getState('${2:inputValue}'),",
			"    onInput: (e) => setState('${3:inputValue}', e.target.value)",
			"}}, //input"
		],
		"description": "Text input with reactive value"
	},
	"Juris Input with ClassName": {
		"prefix": "jinput.",
		"body": [
			"{input: {",
			"    className: '${1:form-input}',",
			"    type: '${2:text}',",
			"    value: () => getState('${3:inputValue}'),",
			"    onInput: (e) => setState('${4:inputValue}', e.target.value)",
			"}}, //input.${1:form-input}"
		],
		"description": "Input with className (use jinput.classname)"
	},
	"Juris Input with ID": {
		"prefix": "jinput#",
		"body": [
			"{input: {",
			"    id: '${1:emailInput}',",
			"    type: '${2:text}',",
			"    value: () => getState('${3:inputValue}'),",
			"    onInput: (e) => setState('${4:inputValue}', e.target.value)",
			"}}, //input#${1:emailInput}"
		],
		"description": "Input with ID (use jinput#idname)"
	},
	"Juris Input with Placeholder": {
		"prefix": "jinputp",
		"body": [
			"{input: {",
			"    type: '${1:text}',",
			"    placeholder: '${2:Enter text...}',",
			"    value: () => getState('${3:inputValue}'),",
			"    onInput: (e) => setState('${4:inputValue}', e.target.value)",
			"}}, //input"
		],
		"description": "Input with placeholder and reactive value"
	},
	"Juris Select": {
		"prefix": "jselect",
		"body": [
			"{select: {",
			"    value: () => getState('${1:selectedValue}'),",
			"    onChange: (e) => setState('${2:selectedValue}', e.target.value),",
			"    children: [",
			"        {option: {value: '${3:value1}', text: '${4:Option 1}'}}, //option",
			"        {option: {value: '${5:value2}', text: '${6:Option 2}'}}, //option",
			"        {option: {value: '${7:value3}', text: '${8:Option 3}'}}, //option",
			"    ]",
			"}}, //select"
		],
		"description": "Select dropdown with options"
	},
	"Juris Select with ClassName": {
		"prefix": "jselect.",
		"body": [
			"{select: {",
			"    className: '${1:form-select}',",
			"    value: () => getState('${2:selectedValue}'),",
			"    onChange: (e) => setState('${3:selectedValue}', e.target.value),",
			"    children: [",
			"        {option: {value: '${4:option1}', text: '${5:Option 1}'}}, //option",
			"        {option: {value: '${6:option2}', text: '${7:Option 2}'}}, //option",
			"    ]",
			"}}, //select.${1:form-select}"
		],
		"description": "Select with className (use jselect.classname)"
	},
	"Juris Select with ID": {
		"prefix": "jselect#",
		"body": [
			"{select: {",
			"    id: '${1:categorySelect}',",
			"    value: () => getState('${2:selectedValue}'),",
			"    onChange: (e) => setState('${3:selectedValue}', e.target.value),",
			"    children: [",
			"        {option: {value: '${4:option1}', text: '${5:Option 1}'}}, //option",
			"        {option: {value: '${6:option2}', text: '${7:Option 2}'}}, //option",
			"    ]",
			"}}, //select#${1:categorySelect}"
		],
		"description": "Select with ID (use jselect#idname)"
	},
	"Juris Textarea": {
		"prefix": "jtextarea",
		"body": [
			"{textarea: {",
			"    value: () => getState('${1:textValue}'),",
			"    onInput: (e) => setState('${2:textValue}', e.target.value),",
			"    placeholder: '${3:Enter text...}',",
			"    rows: ${4:4}",
			"}}, //textarea"
		],
		"description": "Textarea with reactive value"
	},
	"Juris Form": {
		"prefix": "jform",
		"body": [
			"{form: {",
			"    onSubmit: (e) => {",
			"        e.preventDefault();",
			"        ${1:handleSubmit()};",
			"    },",
			"    children: [",
			"        $2",
			"    ]",
			"}}, //form"
		],
		"description": "Form with submit handler"
	},
	"Juris Form with ClassName": {
		"prefix": "jform.",
		"body": [
			"{form: {",
			"    className: '${1:contact-form}',",
			"    onSubmit: (e) => {",
			"        e.preventDefault();",
			"        ${2:handleSubmit()};",
			"    },",
			"    children: [",
			"        ${3}",
			"    ]",
			"}}, //form.${1:contact-form}"
		],
		"description": "Form with className (use jform.classname)"
	},
	"Juris Form with ID": {
		"prefix": "jform#",
		"body": [
			"{form: {",
			"    id: '${1:contactForm}',",
			"    onSubmit: (e) => {",
			"        e.preventDefault();",
			"        ${2:handleSubmit()};",
			"    },",
			"    children: [",
			"        ${3}",
			"    ]",
			"}}, //form#${1:contactForm}"
		],
		"description": "Form with ID (use jform#idname)"
	},
	"Juris Label": {
		"prefix": "jlabel",
		"body": [
			"{label: {",
			"    htmlFor: '${1:inputId}',",
			"    text: '${2:Label Text}'",
			"}}, //label"
		],
		"description": "Label element"
	},
	"Juris Fieldset": {
		"prefix": "jfieldset",
		"body": [
			"{fieldset: {",
			"    children: [",
			"        {legend: {text: '${1:Legend Text}'}}, //legend",
			"        $2",
			"    ]",
			"}}, //fieldset"
		],
		"description": "Fieldset with legend"
	},
	"Juris Paragraph": {
		"prefix": "jp",
		"body": [
			"{p: {text: '${1:Paragraph text}'}}, //p"
		],
		"description": "Paragraph element"
	},
	"Juris Paragraph with ClassName": {
		"prefix": "jp.",
		"body": [
			"{p: {className: '${1:description}', text: '${2:Paragraph text}'}}, //p.${1:description}"
		],
		"description": "Paragraph with className (use jp.classname)"
	},
	"Juris Paragraph with ID": {
		"prefix": "jp#",
		"body": [
			"{p: {id: '${1:intro}', text: '${2:Paragraph text}'}}, //p#${1:intro}"
		],
		"description": "Paragraph with ID (use jp#idname)"
	},
	"Juris Reactive Text": {
		"prefix": "jtext",
		"body": [
			"{${1:p}: {text: () => getState('${2:textPath}')}}, //${1:p}"
		],
		"description": "Reactive text element"
	},
	"Juris Heading": {
		"prefix": "jh1",
		"body": [
			"{h${1:1}: {text: '${2:Heading text}'}}, //h${1:1}"
		],
		"description": "Heading element (h1-h6)"
	},
	"Juris Heading with ClassName": {
		"prefix": "jh1.",
		"body": [
			"{h${1:1}: {className: '${2:title}', text: '${3:Heading text}'}}, //h${1:1}.${2:title}"
		],
		"description": "Heading with className (use jh1.classname, jh2.classname, etc.)"
	},
	"Juris Heading with ID": {
		"prefix": "jh1#",
		"body": [
			"{h${1:1}: {id: '${2:pageTitle}', text: '${3:Heading text}'}}, //h${1:1}#${2:pageTitle}"
		],
		"description": "Heading with ID (use jh1#idname, jh2#idname, etc.)"
	},
	"Juris Span": {
		"prefix": "jspan",
		"body": [
			"{span: {text: '${1:Span text}'}}, //span"
		],
		"description": "Span element"
	},
	"Juris Span with ClassName": {
		"prefix": "jspan.",
		"body": [
			"{span: {className: '${1:highlight}', text: '${2:Span text}'}}, //span.${1:highlight}"
		],
		"description": "Span with className (use jspan.classname)"
	},
	"Juris Span with ID": {
		"prefix": "jspan#",
		"body": [
			"{span: {id: '${1:status}', text: '${2:Span text}'}}, //span#${1:status}"
		],
		"description": "Span with ID (use jspan#idname)"
	},
	"Juris Link": {
		"prefix": "jlink",
		"body": [
			"{a: {",
			"    href: '${1:url}',",
			"    text: '${2:Link text}',",
			"    target: '${3:_blank}'",
			"}}, //a"
		],
		"description": "Link element"
	},
	"Juris Image": {
		"prefix": "jimg",
		"body": [
			"{img: {",
			"    src: '${1:image-url}',",
			"    alt: '${2:Alt text}',",
			"    width: '${3:auto}',",
			"    height: '${4:auto}'",
			"}}, //img"
		],
		"description": "Image element"
	},
	"Juris List Unordered": {
		"prefix": "jul",
		"body": [
			"{ul: {",
			"    className: '${1:list}',",
			"    children: [",
			"        {li: {text: '${2:Item 1}'}}, //li",
			"        {li: {text: '${3:Item 2}'}}, //li",
			"        {li: {text: '${4:Item 3}'}}, //li",
			"    ]",
			"}}, //ul.${1:list}"
		],
		"description": "Unordered list with items"
	},
	"Juris List with ClassName": {
		"prefix": "jul.",
		"body": [
			"{ul: {",
			"    className: '${1:menu}',",
			"    children: [",
			"        {li: {text: '${2:Item 1}'}}, //li",
			"        {li: {text: '${3:Item 2}'}}, //li",
			"        {li: {text: '${4:Item 3}'}}, //li",
			"    ]",
			"}}, //ul.${1:menu}"
		],
		"description": "Unordered list with className (use jul.classname)"
	},
	"Juris List with ID": {
		"prefix": "jul#",
		"body": [
			"{ul: {",
			"    id: '${1:menuList}',",
			"    children: [",
			"        {li: {text: '${2:Item 1}'}}, //li",
			"        {li: {text: '${3:Item 2}'}}, //li",
			"        {li: {text: '${4:Item 3}'}}, //li",
			"    ]",
			"}}, //ul#${1:menuList}"
		],
		"description": "Unordered list with ID (use jul#idname)"
	},
	"Juris List Ordered": {
		"prefix": "jol",
		"body": [
			"{ol: {",
			"    className: '${1:numbered-list}',",
			"    children: [",
			"        {li: {text: '${2:Item 1}'}}, //li",
			"        {li: {text: '${3:Item 2}'}}, //li",
			"        {li: {text: '${4:Item 3}'}}, //li",
			"    ]",
			"}}, //ol.${1:numbered-list}"
		],
		"description": "Ordered list with items"
	},
	"Juris List Item": {
		"prefix": "jli",
		"body": [
			"{li: {text: '${1:List item text}'}}, //li"
		],
		"description": "List item"
	},
	"Juris Table": {
		"prefix": "jtable",
		"body": [
			"{table: {",
			"    className: '${1:data-table}',",
			"    children: [",
			"        {thead: {",
			"            children: [",
			"                {tr: {",
			"                    children: [",
			"                        {th: {text: '${2:Header 1}'}}, //th",
			"                        {th: {text: '${3:Header 2}'}}, //th",
			"                        {th: {text: '${4:Header 3}'}}, //th",
			"                    ]",
			"                }}, //tr",
			"            ]",
			"        }}, //thead",
			"        {tbody: {",
			"            children: [",
			"                {tr: {",
			"                    children: [",
			"                        {td: {text: '${5:Cell 1}'}}, //td",
			"                        {td: {text: '${6:Cell 2}'}}, //td",
			"                        {td: {text: '${7:Cell 3}'}}, //td",
			"                    ]",
			"                }}, //tr",
			"            ]",
			"        }}, //tbody",
			"    ]",
			"}}, //table.${1:data-table}"
		],
		"description": "Complete table with header and body"
	},
	"Juris Table with ClassName": {
		"prefix": "jtable.",
		"body": [
			"{table: {",
			"    className: '${1:data-table}',",
			"    children: [",
			"        {thead: {",
			"            children: [",
			"                {tr: {",
			"                    children: [",
			"                        {th: {text: '${2:Header 1}'}}, //th",
			"                        {th: {text: '${3:Header 2}'}}, //th",
			"                    ]",
			"                }}, //tr",
			"            ]",
			"        }}, //thead",
			"        {tbody: {",
			"            children: [",
			"                {tr: {",
			"                    children: [",
			"                        {td: {text: '${4:Cell 1}'}}, //td",
			"                        {td: {text: '${5:Cell 2}'}}, //td",
			"                    ]",
			"                }}, //tr",
			"            ]",
			"        }}, //tbody",
			"    ]",
			"}}, //table.${1:data-table}"
		],
		"description": "Table with className (use jtable.classname)"
	},
	"Juris Table with ID": {
		"prefix": "jtable#",
		"body": [
			"{table: {",
			"    id: '${1:dataTable}',",
			"    children: [",
			"        {thead: {",
			"            children: [",
			"                {tr: {",
			"                    children: [",
			"                        {th: {text: '${2:Header 1}'}}, //th",
			"                        {th: {text: '${3:Header 2}'}}, //th",
			"                    ]",
			"                }}, //tr",
			"            ]",
			"        }}, //thead",
			"        {tbody: {",
			"            children: [",
			"                {tr: {",
			"                    children: [",
			"                        {td: {text: '${4:Cell 1}'}}, //td",
			"                        {td: {text: '${5:Cell 2}'}}, //td",
			"                    ]",
			"                }}, //tr",
			"            ]",
			"        }}, //tbody",
			"    ]",
			"}}, //table#${1:dataTable}"
		],
		"description": "Table with ID (use jtable#idname)"
	},
	"Juris Table Row": {
		"prefix": "jtr",
		"body": [
			"{tr: {",
			"    children: [",
			"        {td: {text: '${1:Cell 1}'}}, //td",
			"        {td: {text: '${2:Cell 2}'}}, //td",
			"        {td: {text: '${3:Cell 3}'}}, //td",
			"    ]",
			"}}, //tr"
		],
		"description": "Table row with cells"
	},
	"Juris Canvas": {
		"prefix": "jcanvas",
		"body": [
			"{canvas: {",
			"    width: ${1:800},",
			"    height: ${2:600},",
			"    className: '${3:canvas}'",
			"}}, //canvas"
		],
		"description": "Canvas element"
	},
	"Juris Video": {
		"prefix": "jvideo",
		"body": [
			"{video: {",
			"    src: '${1:video-url}',",
			"    controls: true,",
			"    width: '${2:100%}',",
			"    height: '${3:auto}'",
			"}}, //video"
		],
		"description": "Video element"
	},
	"Juris Audio": {
		"prefix": "jaudio",
		"body": [
			"{audio: {",
			"    src: '${1:audio-url}',",
			"    controls: true",
			"}}, //audio"
		],
		"description": "Audio element"
	},
	"Juris Iframe": {
		"prefix": "jiframe",
		"body": [
			"{iframe: {",
			"    src: '${1:iframe-url}',",
			"    width: '${2:100%}',",
			"    height: '${3:400}',",
			"    frameBorder: '0'",
			"}}, //iframe"
		],
		"description": "Iframe element"
	},
	"Juris Progress Bar": {
		"prefix": "jprogress",
		"body": [
			"{progress: {",
			"    value: () => getState('${1:progressValue}'),",
			"    max: ${2:100}",
			"}}, //progress"
		],
		"description": "Progress bar element"
	},
	"Juris Meter": {
		"prefix": "jmeter",
		"body": [
			"{meter: {",
			"    value: () => getState('${1:meterValue}'),",
			"    min: ${2:0},",
			"    max: ${3:100},",
			"    low: ${4:25},",
			"    high: ${5:75}",
			"}}, //meter"
		],
		"description": "Meter element"
	},
	"Juris Details": {
		"prefix": "jdetails",
		"body": [
			"{details: {",
			"    open: () => getState('${1:isOpen}'),",
			"    children: [",
			"        {summary: {text: '${2:Summary text}'}}, //summary",
			"        {div: {",
			"            children: [",
			"                $3",
			"            ]",
			"        }}, //div",
			"    ]",
			"}}, //details"
		],
		"description": "Details/summary collapsible element"
	},
	"Juris Dialog": {
		"prefix": "jdialog",
		"body": [
			"{dialog: {",
			"    open: () => getState('${1:isDialogOpen}'),",
			"    children: [",
			"        $2",
			"    ]",
			"}}, //dialog"
		],
		"description": "Dialog modal element"
	},
	"Juris Conditional Render": {
		"prefix": "jif",
		"body": [
			"...(getState('${1:condition}') ? [",
			"    {${2:div}: {${3:}}}, //${2:div}",
			"] : [])"
		],
		"description": "Conditional rendering"
	},
	"Juris Map Array": {
		"prefix": "jmap",
		"body": [
			"...getState('${1:arrayPath}', []).map((${2:item}, ${3:index}) => ({",
			"    ${4:div}: {",
			"        key: ${3:index},",
			"        text: ${2:item}.${5:property}",
			"    }, //${4:div}",
			"}))"
		],
		"description": "Array mapping with auto-label"
	},
	"Juris Quick Button Array": {
		"prefix": "jbtns3",
		"body": [
			"{button: {text: '${1:Tab 1}', onClick: () => setState('${2:activeTab}', ${3:0})}}, //button",
			"{button: {text: '${4:Tab 2}', onClick: () => setState('${2:activeTab}', ${5:1})}}, //button",
			"{button: {text: '${6:Tab 3}', onClick: () => setState('${2:activeTab}', ${7:2})}}, //button"
		],
		"description": "Quick three-button array"
	},
	"Juris State Subscription": {
		"prefix": "jsub",
		"body": [
			"const unsubscribe = context.subscribe('${1:statePath}', (newValue, oldValue) => {",
			"    ${2:// Handle state change}",
			"});"
		],
		"description": "State subscription"
	},
	"Juris New State": {
		"prefix": "jstate",
		"body": [
			"const [${1:getValue}, ${2:setValue}] = context.newState('${3:stateName}', ${4:initialValue});"
		],
		"description": "Create new local state"
	},
	"Juris Service Injection": {
		"prefix": "jservice",
		"body": [
			"const ${1:serviceName} = context.services.${2:serviceName} || context.${2:serviceName};"
		],
		"description": "Service injection"
	},
	"Juris Template Compilation": {
		"prefix": "jtemplate",
		"body": [
			"<template data-component=\"${1:ComponentName}\" data-context=\"${2:getState, setState}\">",
			"<script>",
			"    /**",
			"     * @param {Object} props",
			"     * @param {JurisContextBase} context",
			"     * @returns {JurisVDOMElement}",
			"     */",
			"    ${3:// Component logic}",
			"</script>",
			"<div class=\"${4:container}\">",
			"    ${5:<!-- Component HTML -->}",
			"</div>",
			"</template>"
		],
		"description": "Juris template compilation structure with JSDoc"
	},
	"Juris Simple Tab Component": {
		"prefix": "jtab",
		"body": [
			"/**",
			" * @param {Object} props",
			" * @param {JurisContextBase} context",
			" * @returns {JurisVDOMElement}",
			" */",
			"export const ${1:SimpleTab} = (props, { getState, setState }) => {",
			"    return {",
			"        div: {",
			"            children: [",
			"                {",
			"                    div: {",
			"                        className: '${2:tab-buttons}',",
			"                        children: [",
			"                            { button: { text: '${3:Tab 1}', onClick: () => setState('${4:activeTab}', 0) } }, //button",
			"                            { button: { text: '${5:Tab 2}', onClick: () => setState('${4:activeTab}', 1) } }, //button",
			"                            { button: { text: '${6:Tab 3}', onClick: () => setState('${4:activeTab}', 2) } }, //button",
			"                        ]",
			"                    }, //div.${2:tab-buttons}",
			"                }, {",
			"                    div: {",
			"                        className: '${7:tab-content}',",
			"                        children: () => {",
			"                            const active = getState('${4:activeTab}', 0);",
			"                            /** @type {JurisVDOMElement[]} */",
			"                            const contents = [",
			"                                { ${8:p}: { text: '${9:Content 1}' } }, //${8:p}",
			"                                { ${8:p}: { text: '${10:Content 2}' } }, //${8:p}",
			"                                { ${8:p}: { text: '${11:Content 3}' } }, //${8:p}",
			"                            ];",
			"                            return [contents[active]];",
			"                        }",
			"                    }, //div.${7:tab-content}",
			"                }",
			"            ]",
			"        }, //div",
			"    };",
			"};"
		],
		"description": "Complete tab component with reactive content switching"
	},
	"Juris Tab System": {
		"prefix": "jtabs",
		"body": [
			"/**",
			" * @param {Object} props",
			" * @param {JurisContextBase} context",
			" * @returns {JurisVDOMElement}",
			" */",
			"export const ${1:TabSystem} = (props, { getState, setState }) => {",
			"    const { ${2:tabs} = ['${3:Tab 1}', '${4:Tab 2}', '${5:Tab 3}'] } = props;",
			"    ",
			"    return {",
			"        div: {",
			"            className: '${6:tab-system}',",
			"            children: [",
			"                {",
			"                    div: {",
			"                        className: '${7:tab-nav}',",
			"                        children: () => {",
			"                            return ${2:tabs}.map((tab, index) => ({",
			"                                button: {",
			"                                    className: () => {",
			"                                        const active = getState('${8:activeTab}', 0);",
			"                                        return active === index ? '${9:tab-active}' : '${10:tab-inactive}';",
			"                                    },",
			"                                    text: tab,",
			"                                    onClick: () => setState('${8:activeTab}', index)",
			"                                }, //button",
			"                            }));",
			"                        }",
			"                    }, //div.${7:tab-nav}",
			"                }, {",
			"                    div: {",
			"                        className: '${11:tab-panel}',",
			"                        children: () => {",
			"                            const active = getState('${8:activeTab}', 0);",
			"                            /** @type {JurisVDOMElement[]} */",
			"                            const contents = [",
			"                                ${12:// Add your tab content here}",
			"                            ];",
			"                            return [contents[active] || { p: { text: 'No content' } }]; //p",
			"                        }",
			"                    }, //div.${11:tab-panel}",
			"                }",
			"            ]",
			"        }, //div.${6:tab-system}",
			"    };",
			"};"
		],
		"description": "Dynamic tab system with props-based tab names"
	},
	"Juris Conditional Renderer": {
		"prefix": "jconditional",
		"body": [
			"const ${1:ConditionalRenderer} = (props, context) => ({",
			"    render: () => ({",
			"        div: {",
			"            children: () => {",
			"                const condition = typeof props.condition === 'function'",
			"                    ? props.condition()",
			"                    : props.condition;",
			"",
			"                if (condition) {",
			"                    return props.whenTrue ?",
			"                        (Array.isArray(props.whenTrue) ? props.whenTrue : [props.whenTrue]) :",
			"                        [];",
			"                }",
			"",
			"                return props.whenFalse ?",
			"                    (Array.isArray(props.whenFalse) ? props.whenFalse : [props.whenFalse]) :",
			"                    [];",
			"            }",
			"        }, //div",
			"    })",
			"});"
		],
		"description": "Conditional renderer component with whenTrue/whenFalse patterns"
	},
	"Juris Switch Renderer": {
		"prefix": "jswitch",
		"body": [
			"const ${1:SwitchRenderer} = (props, context) => ({",
			"    render: () => ({",
			"        div: {",
			"            children: () => {",
			"                const value = typeof props.value === 'function'",
			"                    ? props.value()",
			"                    : props.value;",
			"",
			"                // Look for exact match first",
			"                if (props[value]) {",
			"                    const match = props[value];",
			"                    return Array.isArray(match) ? match : [match];",
			"                }",
			"",
			"                // Fallback to default",
			"                if (props.default) {",
			"                    return Array.isArray(props.default) ? props.default : [props.default];",
			"                }",
			"",
			"                return [];",
			"            }",
			"        }, //div",
			"    })",
			"});"
		],
		"description": "Switch renderer component for value-based conditional rendering"
	},
	"Juris List Renderer": {
		"prefix": "jlist",
		"body": [
			"const ${1:ListRenderer} = (props, context) => ({",
			"    render: () => ({",
			"        div: {",
			"            className: props.containerClass || '',",
			"            children: () => {",
			"                const items = typeof props.items === 'function'",
			"                    ? props.items()",
			"                    : props.items || [];",
			"",
			"                if (items.length === 0) {",
			"                    return props.empty ?",
			"                        (Array.isArray(props.empty) ? props.empty : [props.empty]) :",
			"                        [];",
			"                }",
			"",
			"                if (props.itemComponent && props.itemProps) {",
			"                    return items.map((item, index) => ({",
			"                        [props.itemComponent]: {",
			"                            key: item.id || index,",
			"                            ...props.itemProps(item, index)",
			"                        }, //dynamic component",
			"                    }));",
			"                }",
			"",
			"                return items.map((item, index) => ({",
			"                    div: {",
			"                        key: item.id || index,",
			"                        className: 'list-item',",
			"                        text: typeof item === 'object' ? JSON.stringify(item) : item",
			"                    }, //div",
			"                }));",
			"            }",
			"        }, //div",
			"    })",
			"});"
		],
		"description": "List renderer component with empty state and dynamic item components"
	},
	"Juris Async Renderer": {
		"prefix": "jasync",
		"body": [
			"const ${1:AsyncRenderer} = (props, context) => ({",
			"    render: () => ({",
			"        div: {",
			"            children: () => {",
			"                const loading = typeof props.loading === 'function'",
			"                    ? props.loading()",
			"                    : props.loading;",
			"                const error = typeof props.error === 'function'",
			"                    ? props.error()",
			"                    : props.error;",
			"                const data = typeof props.data === 'function'",
			"                    ? props.data()",
			"                    : props.data;",
			"",
			"                if (loading) {",
			"                    return props.loadingComponent ?",
			"                        (Array.isArray(props.loadingComponent) ? props.loadingComponent : [props.loadingComponent]) :",
			"                        [{ div: { className: 'loading', text: 'Loading...' } }];",
			"                }",
			"",
			"                if (error) {",
			"                    return props.errorComponent ?",
			"                        (Array.isArray(props.errorComponent) ? props.errorComponent : [props.errorComponent]) :",
			"                        [{ div: { className: 'error', text: `Error: ${error}` } }];",
			"                }",
			"",
			"                if (data !== null && data !== undefined) {",
			"                    return props.successComponent ?",
			"                        (Array.isArray(props.successComponent) ? props.successComponent : [props.successComponent]) :",
			"                        [{ div: { text: 'Data loaded successfully' } }];",
			"                }",
			"",
			"                return props.emptyComponent ?",
			"                    (Array.isArray(props.emptyComponent) ? props.emptyComponent : [props.emptyComponent]) :",
			"                    [];",
			"            }",
			"        }, //div",
			"    })",
			"});"
		],
		"description": "Async renderer component for loading/error/success states"
	},
	"Juris Step Renderer": {
		"prefix": "jstep",
		"body": [
			"const ${1:StepRenderer} = (props, context) => ({",
			"    render: () => {",
			"        const currentStep = typeof props.currentStep === 'function' ? props.currentStep() : (props.currentStep || 1);",
			"        const totalSteps = typeof props.totalSteps === 'function' ? props.totalSteps() : (props.totalSteps || Object.keys(props.steps || {}).length);",
			"        const steps = props.steps || {};",
			"",
			"        const stepIndicator = {",
			"            div: {",
			"                className: 'step-indicator',",
			"                children: Array.from({ length: totalSteps }, (_, i) => {",
			"                    const stepNum = i + 1;",
			"                    let className = 'step';",
			"                    if (stepNum < currentStep) className += ' completed';",
			"                    if (stepNum === currentStep) className += ' active';",
			"",
			"                    return {",
			"                        div: {",
			"                            className,",
			"                            text: `Step ${stepNum}`",
			"                        }, //div",
			"                    };",
			"                })",
			"            }, //div",
			"        };",
			"",
			"        const currentStepContent = steps[currentStep] || { div: { text: `Step ${currentStep} content` } };",
			"",
			"        const navigation = props.navigation ? props.navigation : {",
			"            div: {",
			"                className: 'flex',",
			"                children: [",
			"                    {",
			"                        button: {",
			"                            text: 'Previous',",
			"                            disabled: () => currentStep <= 1,",
			"                            onclick: () => props.onPrevious && props.onPrevious(),",
			"                            className: 'btn-secondary'",
			"                        }, //button",
			"                    },",
			"                    {",
			"                        button: {",
			"                            text: currentStep >= totalSteps ? 'Finish' : 'Next',",
			"                            onclick: () => props.onNext && props.onNext(),",
			"                            className: currentStep >= totalSteps ? 'btn-success' : ''",
			"                        }, //button",
			"                    }",
			"                ]",
			"            }, //div",
			"        };",
			"",
			"        return {",
			"            div: {",
			"                children: [",
			"                    stepIndicator,",
			"                    currentStepContent,",
			"                    navigation",
			"                ]",
			"            }, //div",
			"        };",
			"    }",
			"});"
		],
		"description": "Step/wizard renderer component with navigation and indicators"
	},
	"Juris Tab Renderer": {
		"prefix": "jtabrenderer",
		"body": [
			"const ${1:TabRenderer} = (props, context) => ({",
			"    render: () => {",
			"        const activeTab = typeof props.activeTab === 'function' ? props.activeTab() : props.activeTab;",
			"        const tabs = props.tabs || {};",
			"        const tabNames = Object.keys(tabs);",
			"",
			"        const tabBar = {",
			"            div: {",
			"                className: 'tabs',",
			"                children: tabNames.map(tabName => ({",
			"                    div: {",
			"                        className: () => `tab ${activeTab === tabName ? 'active' : ''}`,",
			"                        text: props.tabLabels ? props.tabLabels[tabName] || tabName : tabName,",
			"                        onclick: () => props.onTabChange && props.onTabChange(tabName)",
			"                    }, //div",
			"                }))",
			"            }, //div",
			"        };",
			"",
			"        const activeContent = tabs[activeTab] || { div: { text: 'No content' } };",
			"",
			"        return {",
			"            div: {",
			"                children: [",
			"                    tabBar,",
			"                    activeContent",
			"                ]",
			"            }, //div",
			"        };",
			"    }",
			"});"
		],
		"description": "Tab renderer component with dynamic tab bar and content"
	},
	"Juris Modal Renderer": {
		"prefix": "jmodal",
		"body": [
			"const ${1:ModalRenderer} = (props, context) => ({",
			"    render: () => {",
			"        const isOpen = typeof props.isOpen === 'function' ? props.isOpen() : (props.isOpen || false);",
			"",
			"        if (!isOpen) {",
			"            return { div: { children: [] } }; // Return empty instead of null",
			"        }",
			"",
			"        const modalType = typeof props.type === 'function' ? props.type() : (props.type || 'default');",
			"        const modals = props.modals || {};",
			"        const content = modals[modalType] || props.children || { div: { text: 'Modal content' } };",
			"",
			"        return {",
			"            div: {",
			"                children: [",
			"                    {",
			"                        div: {",
			"                            className: 'modal-backdrop',",
			"                            onclick: () => props.onClose && props.onClose()",
			"                        }, //div",
			"                    },",
			"                    {",
			"                        div: {",
			"                            className: 'modal',",
			"                            children: [",
			"                                content,",
			"                                props.showCloseButton !== false ? {",
			"                                    button: {",
			"                                        text: 'Close',",
			"                                        onclick: () => props.onClose && props.onClose(),",
			"                                        className: 'btn-secondary'",
			"                                    }, //button",
			"                                } : null",
			"                            ].filter(Boolean)",
			"                        }, //div",
			"                    }",
			"                ]",
			"            }, //div",
			"        };",
			"    }",
			"});"
		],
		"description": "Modal renderer component with backdrop and close functionality"
	},
	"Juris Multi State Renderer": {
		"prefix": "jmultistate",
		"body": [
			"const ${1:MultiStateRenderer} = (props, context) => ({",
			"    render: () => ({",
			"        div: {",
			"            children: () => {",
			"                // Check conditions in order and return first match",
			"                if (props.conditions) {",
			"                    for (const condition of props.conditions) {",
			"                        const test = typeof condition.when === 'function'",
			"                            ? condition.when()",
			"                            : condition.when;",
			"",
			"                        if (test) {",
			"                            return condition.render ?",
			"                                (Array.isArray(condition.render) ? condition.render : [condition.render]) :",
			"                                [];",
			"                        }",
			"                    }",
			"                }",
			"",
			"                // No conditions matched, return fallback",
			"                return props.fallback ?",
			"                    (Array.isArray(props.fallback) ? props.fallback : [props.fallback]) :",
			"                    [];",
			"            }",
			"        }, //div",
			"    })",
			"});"
		],
		"description": "Multi-state renderer component with ordered condition checking"
	},
	"Juris Permission Renderer": {
		"prefix": "jpermission",
		"body": [
			"const ${1:PermissionRenderer} = (props, context) => {",
			"    const { getState } = context;",
			"",
			"    return {",
			"        render: () => ({",
			"            div: {",
			"                children: () => {",
			"                    const userRole = typeof props.userRole === 'function' ? props.userRole() : (props.userRole || getState('user.role', 'guest'));",
			"                    const allowedRoles = props.allowedRoles || ['user'];",
			"",
			"                    if (allowedRoles.includes(userRole)) {",
			"                        return props.authorized ?",
			"                            (Array.isArray(props.authorized) ? props.authorized : [props.authorized]) :",
			"                            [];",
			"                    }",
			"",
			"                    return props.unauthorized ?",
			"                        (Array.isArray(props.unauthorized) ? props.unauthorized : [props.unauthorized]) :",
			"                        [{ div: { className: 'error', text: 'Access denied' } }];",
			"                }",
			"            }, //div",
			"        })",
			"    };",
			"};"
		],
		"description": "Permission-based renderer component with role checking"
	},
	"Juris Retry Renderer": {
		"prefix": "jretry",
		"body": [
			"const ${1:RetryRenderer} = (props, context) => ({",
			"    render: () => ({",
			"        div: {",
			"            children: () => {",
			"                const error = typeof props.error === 'function' ? props.error() : props.error;",
			"                const retryCount = typeof props.retryCount === 'function' ? props.retryCount() : (props.retryCount || 0);",
			"                const maxRetries = props.maxRetries || 3;",
			"                const isRetrying = typeof props.isRetrying === 'function' ? props.isRetrying() : (props.isRetrying || false);",
			"",
			"                if (error && retryCount < maxRetries) {",
			"                    return [{",
			"                        div: {",
			"                            className: 'retry-container',",
			"                            children: [",
			"                                { div: { text: `Error: ${error}`, className: 'error' } }, //div",
			"                                { div: { text: `Attempt ${retryCount + 1} of ${maxRetries}` } }, //div",
			"                                isRetrying ?",
			"                                    { div: { text: 'Retrying...', className: 'loading' } } :",
			"                                    {",
			"                                        button: {",
			"                                            text: 'Retry',",
			"                                            onclick: () => props.onRetry && props.onRetry(),",
			"                                            className: 'btn-secondary'",
			"                                        }, //button",
			"                                    }",
			"                            ]",
			"                        }, //div",
			"                    }];",
			"                } else if (error && retryCount >= maxRetries) {",
			"                    return props.maxRetriesReached ?",
			"                        (Array.isArray(props.maxRetriesReached) ? props.maxRetriesReached : [props.maxRetriesReached]) :",
			"                        [{ div: { text: 'Maximum retries exceeded', className: 'error' } }];",
			"                } else {",
			"                    return props.children ?",
			"                        (Array.isArray(props.children) ? props.children : [props.children]) :",
			"                        [];",
			"                }",
			"            }",
			"        }, //div",
			"    })",
			"});"
		],
		"description": "Retry renderer component with error handling and retry logic"
	},
	"Juris Route Renderer": {
		"prefix": "jroute",
		"body": [
			"const ${1:RouteRenderer} = (props, context) => {",
			"    const { getState } = context;",
			"",
			"    return {",
			"        render: () => ({",
			"            div: {",
			"                children: () => {",
			"                    const currentRoute = getState('router.currentRoute', '/');",
			"",
			"                    // Look for exact route match",
			"                    if (props[currentRoute]) {",
			"                        const match = props[currentRoute];",
			"                        return Array.isArray(match) ? match : [match];",
			"                    }",
			"",
			"                    // Fallback to 404",
			"                    if (props.notFound) {",
			"                        return Array.isArray(props.notFound) ? props.notFound : [props.notFound];",
			"                    }",
			"",
			"                    return [{ div: { text: '404 - Route not found' } }];",
			"                }",
			"            }, //div",
			"        })",
			"    };",
			"};"
		],
		"description": "Route renderer component for client-side routing"
	},
	"Juris Control Flow Usage - Conditional": {
		"prefix": "juseconditional",
		"body": [
			"// Usage: Conditional Renderer",
			"{${1:ConditionalRenderer}: {",
			"    condition: () => getState('${2:isVisible}'),",
			"    whenTrue: [",
			"        {div: {text: '${3:Content when true}'}}, //div",
			"    ],",
			"    whenFalse: [",
			"        {div: {text: '${4:Content when false}'}}, //div",
			"    ]",
			"}}, //${1:ConditionalRenderer}"
		],
		"description": "Usage example for ConditionalRenderer component"
	},
	"Juris Control Flow Usage - Switch": {
		"prefix": "juseswitch",
		"body": [
			"// Usage: Switch Renderer",
			"{${1:SwitchRenderer}: {",
			"    value: () => getState('${2:currentView}'),",
			"    ${3:home}: [",
			"        {div: {text: '${4:Home content}'}}, //div",
			"    ],",
			"    ${5:about}: [",
			"        {div: {text: '${6:About content}'}}, //div",
			"    ],",
			"    default: [",
			"        {div: {text: '${7:Default content}'}}, //div",
			"    ]",
			"}}, //${1:SwitchRenderer}"
		],
		"description": "Usage example for SwitchRenderer component"
	},
	"Juris Control Flow Usage - List": {
		"prefix": "juselist",
		"body": [
			"// Usage: List Renderer",
			"{${1:ListRenderer}: {",
			"    items: () => getState('${2:itemList}', []),",
			"    containerClass: '${3:list-container}',",
			"    itemComponent: '${4:div}',",
			"    itemProps: (item, index) => ({",
			"        className: 'list-item',",
			"        text: item.${5:name},",
			"        key: item.id || index",
			"    }),",
			"    empty: [",
			"        {div: {text: '${6:No items available}', className: 'empty-state'}}, //div",
			"    ]",
			"}}, //${1:ListRenderer}"
		],
		"description": "Usage example for ListRenderer component"
	},
	"Juris Control Flow Usage - Async": {
		"prefix": "juseasync",
		"body": [
			"// Usage: Async Renderer",
			"{${1:AsyncRenderer}: {",
			"    loading: () => getState('${2:isLoading}'),",
			"    error: () => getState('${3:error}'),",
			"    data: () => getState('${4:data}'),",
			"    loadingComponent: [",
			"        {div: {text: '${5:Loading...}', className: 'spinner'}}, //div",
			"    ],",
			"    errorComponent: [",
			"        {div: {text: '${6:Error occurred}', className: 'error'}}, //div",
			"    ],",
			"    successComponent: [",
			"        {div: {text: '${7:Data loaded successfully}'}}, //div",
			"    ]",
			"}}, //${1:AsyncRenderer}"
		],
		"description": "Usage example for AsyncRenderer component"
	},
	"Juris Control Flow Usage - Modal": {
		"prefix": "jusemodal",
		"body": [
			"// Usage: Modal Renderer",
			"{${1:ModalRenderer}: {",
			"    isOpen: () => getState('${2:isModalOpen}'),",
			"    type: () => getState('${3:modalType}'),",
			"    modals: {",
			"        ${4:confirm}: {",
			"            div: {",
			"                className: 'confirm-modal',",
			"                children: [",
			"                    {h3: {text: '${5:Confirm Action}'}}, //h3",
			"                    {p: {text: '${6:Are you sure?}'}}, //p",
			"                ]",
			"            }, //div",
			"        },",
			"        ${7:info}: {",
			"            div: {",
			"                className: 'info-modal',",
			"                children: [",
			"                    {h3: {text: '${8:Information}'}}, //h3",
			"                    {p: {text: '${9:Modal content here}'}}, //p",
			"                ]",
			"            }, //div",
			"        }",
			"    },",
			"    onClose: () => setState('${2:isModalOpen}', false),",
			"    showCloseButton: true",
			"}}, //${1:ModalRenderer}"
		],
		"description": "Usage example for ModalRenderer component"
	},
	"Juris Component - Conditional Complete": {
		"prefix": "jconditionalcomp",
		"body": [
			"/**",
			" * @param {Object} props",
			" * @param {JurisContextBase} context",
			" * @returns {JurisLifecycleComponent}",
			" */",
			"const ${1:ConditionalRenderer} = (props, context) => ({",
			"    render: () => ({",
			"        div: {",
			"            children: () => {",
			"                const condition = typeof props.condition === 'function'",
			"                    ? props.condition()",
			"                    : props.condition;",
			"",
			"                if (condition) {",
			"                    return props.whenTrue ?",
			"                        (Array.isArray(props.whenTrue) ? props.whenTrue : [props.whenTrue]) :",
			"                        [];",
			"                }",
			"",
			"                return props.whenFalse ?",
			"                    (Array.isArray(props.whenFalse) ? props.whenFalse : [props.whenFalse]) :",
			"                    [];",
			"            }",
			"        }, //div",
			"    })",
			"});"
		],
		"description": "Complete ConditionalRenderer component implementation"
	},
	"Juris Component - Switch Complete": {
		"prefix": "jswitchcomp",
		"body": [
			"/**",
			" * @param {Object} props",
			" * @param {JurisContextBase} context",
			" * @returns {JurisLifecycleComponent}",
			" */",
			"const ${1:SwitchRenderer} = (props, context) => ({",
			"    render: () => ({",
			"        div: {",
			"            children: () => {",
			"                const value = typeof props.value === 'function'",
			"                    ? props.value()",
			"                    : props.value;",
			"",
			"                // Look for exact match first",
			"                if (props[value]) {",
			"                    const match = props[value];",
			"                    return Array.isArray(match) ? match : [match];",
			"                }",
			"",
			"                // Fallback to default",
			"                if (props.default) {",
			"                    return Array.isArray(props.default) ? props.default : [props.default];",
			"                }",
			"",
			"                return [];",
			"            }",
			"        }, //div",
			"    })",
			"});"
		],
		"description": "Complete SwitchRenderer component implementation"
	},
	"Juris Component - List Complete": {
		"prefix": "jlistcomp",
		"body": [
			"/**",
			" * @param {Object} props",
			" * @param {JurisContextBase} context",
			" * @returns {JurisLifecycleComponent}",
			" */",
			"const ${1:ListRenderer} = (props, context) => ({",
			"    render: () => ({",
			"        div: {",
			"            className: props.containerClass || '',",
			"            children: () => {",
			"                const items = typeof props.items === 'function'",
			"                    ? props.items()",
			"                    : props.items || [];",
			"",
			"                if (items.length === 0) {",
			"                    return props.empty ?",
			"                        (Array.isArray(props.empty) ? props.empty : [props.empty]) :",
			"                        [];",
			"                }",
			"",
			"                if (props.itemComponent && props.itemProps) {",
			"                    return items.map((item, index) => ({",
			"                        [props.itemComponent]: {",
			"                            key: item.id || index,",
			"                            ...props.itemProps(item, index)",
			"                        }, //dynamic component",
			"                    }));",
			"                }",
			"",
			"                return items.map((item, index) => ({",
			"                    div: {",
			"                        key: item.id || index,",
			"                        className: 'list-item',",
			"                        text: typeof item === 'object' ? JSON.stringify(item) : item",
			"                    }, //div",
			"                }));",
			"            }",
			"        }, //div",
			"    })",
			"});"
		],
		"description": "Complete ListRenderer component implementation"
	},
	"Juris Component - Async Complete": {
		"prefix": "jasynccomp",
		"body": [
			"/**",
			" * @param {Object} props",
			" * @param {JurisContextBase} context",
			" * @returns {JurisLifecycleComponent}",
			" */",
			"const ${1:AsyncRenderer} = (props, context) => ({",
			"    render: () => ({",
			"        div: {",
			"            children: () => {",
			"                const loading = typeof props.loading === 'function'",
			"                    ? props.loading()",
			"                    : props.loading;",
			"                const error = typeof props.error === 'function'",
			"                    ? props.error()",
			"                    : props.error;",
			"                const data = typeof props.data === 'function'",
			"                    ? props.data()",
			"                    : props.data;",
			"",
			"                if (loading) {",
			"                    return props.loadingComponent ?",
			"                        (Array.isArray(props.loadingComponent) ? props.loadingComponent : [props.loadingComponent]) :",
			"                        [{ div: { className: 'loading', text: 'Loading...' } }];",
			"                }",
			"",
			"                if (error) {",
			"                    return props.errorComponent ?",
			"                        (Array.isArray(props.errorComponent) ? props.errorComponent : [props.errorComponent]) :",
			"                        [{ div: { className: 'error', text: `Error: ${error}` } }];",
			"                }",
			"",
			"                if (data !== null && data !== undefined) {",
			"                    return props.successComponent ?",
			"                        (Array.isArray(props.successComponent) ? props.successComponent : [props.successComponent]) :",
			"                        [{ div: { text: 'Data loaded successfully' } }];",
			"                }",
			"",
			"                return props.emptyComponent ?",
			"                    (Array.isArray(props.emptyComponent) ? props.emptyComponent : [props.emptyComponent]) :",
			"                    [];",
			"            }",
			"        }, //div",
			"    })",
			"});"
		],
		"description": "Complete AsyncRenderer component implementation"
	},
	"Juris Component - Step Complete": {
		"prefix": "jstepcomp",
		"body": [
			"/**",
			" * @param {Object} props",
			" * @param {JurisContextBase} context",
			" * @returns {JurisLifecycleComponent}",
			" */",
			"const ${1:StepRenderer} = (props, context) => ({",
			"    render: () => {",
			"        const currentStep = typeof props.currentStep === 'function' ? props.currentStep() : (props.currentStep || 1);",
			"        const totalSteps = typeof props.totalSteps === 'function' ? props.totalSteps() : (props.totalSteps || Object.keys(props.steps || {}).length);",
			"        const steps = props.steps || {};",
			"",
			"        const stepIndicator = {",
			"            div: {",
			"                className: 'step-indicator',",
			"                children: Array.from({ length: totalSteps }, (_, i) => {",
			"                    const stepNum = i + 1;",
			"                    let className = 'step';",
			"                    if (stepNum < currentStep) className += ' completed';",
			"                    if (stepNum === currentStep) className += ' active';",
			"",
			"                    return {",
			"                        div: {",
			"                            className,",
			"                            text: `Step ${stepNum}`",
			"                        }, //div",
			"                    };",
			"                })",
			"            }, //div",
			"        };",
			"",
			"        const currentStepContent = steps[currentStep] || { div: { text: `Step ${currentStep} content` } };",
			"",
			"        const navigation = props.navigation ? props.navigation : {",
			"            div: {",
			"                className: 'flex',",
			"                children: [",
			"                    {",
			"                        button: {",
			"                            text: 'Previous',",
			"                            disabled: () => currentStep <= 1,",
			"                            onclick: () => props.onPrevious && props.onPrevious(),",
			"                            className: 'btn-secondary'",
			"                        }, //button",
			"                    },",
			"                    {",
			"                        button: {",
			"                            text: currentStep >= totalSteps ? 'Finish' : 'Next',",
			"                            onclick: () => props.onNext && props.onNext(),",
			"                            className: currentStep >= totalSteps ? 'btn-success' : ''",
			"                        }, //button",
			"                    }",
			"                ]",
			"            }, //div",
			"        };",
			"",
			"        return {",
			"            div: {",
			"                children: [",
			"                    stepIndicator,",
			"                    currentStepContent,",
			"                    navigation",
			"                ]",
			"            }, //div",
			"        };",
			"    }",
			"});"
		],
		"description": "Complete StepRenderer component implementation"
	},
	"Juris Component - Tab Complete": {
		"prefix": "jtabcomp",
		"body": [
			"/**",
			" * @param {Object} props",
			" * @param {JurisContextBase} context",
			" * @returns {JurisLifecycleComponent}",
			" */",
			"const ${1:TabRenderer} = (props, context) => ({",
			"    render: () => {",
			"        const activeTab = typeof props.activeTab === 'function' ? props.activeTab() : props.activeTab;",
			"        const tabs = props.tabs || {};",
			"        const tabNames = Object.keys(tabs);",
			"",
			"        const tabBar = {",
			"            div: {",
			"                className: 'tabs',",
			"                children: tabNames.map(tabName => ({",
			"                    div: {",
			"                        className: () => `tab ${activeTab === tabName ? 'active' : ''}`,",
			"                        text: props.tabLabels ? props.tabLabels[tabName] || tabName : tabName,",
			"                        onclick: () => props.onTabChange && props.onTabChange(tabName)",
			"                    }, //div",
			"                }))",
			"            }, //div",
			"        };",
			"",
			"        const activeContent = tabs[activeTab] || { div: { text: 'No content' } };",
			"",
			"        return {",
			"            div: {",
			"                children: [",
			"                    tabBar,",
			"                    activeContent",
			"                ]",
			"            }, //div",
			"        };",
			"    }",
			"});"
		],
		"description": "Complete TabRenderer component implementation"
	},
	"Juris Component - Modal Complete": {
		"prefix": "jmodalcomp",
		"body": [
			"/**",
			" * @param {Object} props",
			" * @param {JurisContextBase} context",
			" * @returns {JurisLifecycleComponent}",
			" */",
			"const ${1:ModalRenderer} = (props, context) => ({",
			"    render: () => {",
			"        const isOpen = typeof props.isOpen === 'function' ? props.isOpen() : (props.isOpen || false);",
			"",
			"        if (!isOpen) {",
			"            return { div: { children: [] } }; // Return empty instead of null",
			"        }",
			"",
			"        const modalType = typeof props.type === 'function' ? props.type() : (props.type || 'default');",
			"        const modals = props.modals || {};",
			"        const content = modals[modalType] || props.children || { div: { text: 'Modal content' } };",
			"",
			"        return {",
			"            div: {",
			"                children: [",
			"                    {",
			"                        div: {",
			"                            className: 'modal-backdrop',",
			"                            onclick: () => props.onClose && props.onClose()",
			"                        }, //div",
			"                    },",
			"                    {",
			"                        div: {",
			"                            className: 'modal',",
			"                            children: [",
			"                                content,",
			"                                props.showCloseButton !== false ? {",
			"                                    button: {",
			"                                        text: 'Close',",
			"                                        onclick: () => props.onClose && props.onClose(),",
			"                                        className: 'btn-secondary'",
			"                                    }, //button",
			"                                } : null",
			"                            ].filter(Boolean)",
			"                        }, //div",
			"                    }",
			"                ]",
			"            }, //div",
			"        };",
			"    }",
			"});"
		],
		"description": "Complete ModalRenderer component implementation"
	},
	"Juris Component - MultiState Complete": {
		"prefix": "jmultistatecomp",
		"body": [
			"/**",
			" * @param {Object} props",
			" * @param {JurisContextBase} context",
			" * @returns {JurisLifecycleComponent}",
			" */",
			"const ${1:MultiStateRenderer} = (props, context) => ({",
			"    render: () => ({",
			"        div: {",
			"            children: () => {",
			"                // Check conditions in order and return first match",
			"                if (props.conditions) {",
			"                    for (const condition of props.conditions) {",
			"                        const test = typeof condition.when === 'function'",
			"                            ? condition.when()",
			"                            : condition.when;",
			"",
			"                        if (test) {",
			"                            return condition.render ?",
			"                                (Array.isArray(condition.render) ? condition.render : [condition.render]) :",
			"                                [];",
			"                        }",
			"                    }",
			"                }",
			"",
			"                // No conditions matched, return fallback",
			"                return props.fallback ?",
			"                    (Array.isArray(props.fallback) ? props.fallback : [props.fallback]) :",
			"                    [];",
			"            }",
			"        }, //div",
			"    })",
			"});"
		],
		"description": "Complete MultiStateRenderer component implementation"
	},
	"Juris Component - Permission Complete": {
		"prefix": "jpermissioncomp",
		"body": [
			"/**",
			" * @param {Object} props",
			" * @param {JurisContextBase} context",
			" * @returns {JurisLifecycleComponent}",
			" */",
			"const ${1:PermissionRenderer} = (props, context) => {",
			"    const { getState } = context;",
			"",
			"    return {",
			"        render: () => ({",
			"            div: {",
			"                children: () => {",
			"                    const userRole = typeof props.userRole === 'function' ? props.userRole() : (props.userRole || getState('user.role', 'guest'));",
			"                    const allowedRoles = props.allowedRoles || ['user'];",
			"",
			"                    if (allowedRoles.includes(userRole)) {",
			"                        return props.authorized ?",
			"                            (Array.isArray(props.authorized) ? props.authorized : [props.authorized]) :",
			"                            [];",
			"                    }",
			"",
			"                    return props.unauthorized ?",
			"                        (Array.isArray(props.unauthorized) ? props.unauthorized : [props.unauthorized]) :",
			"                        [{ div: { className: 'error', text: 'Access denied' } }];",
			"                }",
			"            }, //div",
			"        })",
			"    };",
			"};"
		],
		"description": "Complete PermissionRenderer component implementation"
	},
	"Juris Component - Retry Complete": {
		"prefix": "jretrycomp",
		"body": [
			"/**",
			" * @param {Object} props",
			" * @param {JurisContextBase} context",
			" * @returns {JurisLifecycleComponent}",
			" */",
			"const ${1:RetryRenderer} = (props, context) => ({",
			"    render: () => ({",
			"        div: {",
			"            children: () => {",
			"                const error = typeof props.error === 'function' ? props.error() : props.error;",
			"                const retryCount = typeof props.retryCount === 'function' ? props.retryCount() : (props.retryCount || 0);",
			"                const maxRetries = props.maxRetries || 3;",
			"                const isRetrying = typeof props.isRetrying === 'function' ? props.isRetrying() : (props.isRetrying || false);",
			"",
			"                if (error && retryCount < maxRetries) {",
			"                    return [{",
			"                        div: {",
			"                            className: 'retry-container',",
			"                            children: [",
			"                                { div: { text: `Error: ${error}`, className: 'error' } }, //div",
			"                                { div: { text: `Attempt ${retryCount + 1} of ${maxRetries}` } }, //div",
			"                                isRetrying ?",
			"                                    { div: { text: 'Retrying...', className: 'loading' } } :",
			"                                    {",
			"                                        button: {",
			"                                            text: 'Retry',",
			"                                            onclick: () => props.onRetry && props.onRetry(),",
			"                                            className: 'btn-secondary'",
			"                                        }, //button",
			"                                    }",
			"                            ]",
			"                        }, //div",
			"                    }];",
			"                } else if (error && retryCount >= maxRetries) {",
			"                    return props.maxRetriesReached ?",
			"                        (Array.isArray(props.maxRetriesReached) ? props.maxRetriesReached : [props.maxRetriesReached]) :",
			"                        [{ div: { text: 'Maximum retries exceeded', className: 'error' } }];",
			"                } else {",
			"                    return props.children ?",
			"                        (Array.isArray(props.children) ? props.children : [props.children]) :",
			"                        [];",
			"                }",
			"            }",
			"        }, //div",
			"    })",
			"});"
		],
		"description": "Complete RetryRenderer component implementation"
	},
	"Juris Component - Route Complete": {
		"prefix": "jroutecomp",
		"body": [
			"/**",
			" * @param {Object} props",
			" * @param {JurisContextBase} context",
			" * @returns {JurisLifecycleComponent}",
			" */",
			"const ${1:RouteRenderer} = (props, context) => {",
			"    const { getState } = context;",
			"",
			"    return {",
			"        render: () => ({",
			"            div: {",
			"                children: () => {",
			"                    const currentRoute = getState('router.currentRoute', '/');",
			"",
			"                    // Look for exact route match",
			"                    if (props[currentRoute]) {",
			"                        const match = props[currentRoute];",
			"                        return Array.isArray(match) ? match : [match];",
			"                    }",
			"",
			"                    // Fallback to 404",
			"                    if (props.notFound) {",
			"                        return Array.isArray(props.notFound) ? props.notFound : [props.notFound];",
			"                    }",
			"",
			"                    return [{ div: { text: '404 - Route not found' } }];",
			"                }",
			"            }, //div",
			"        })",
			"    };",
			"};"
		],
		"description": "Complete RouteRenderer component implementation"
	},
	"Create New Juris Instance": {
		"prefix": "jnew",
		"body": [
			"// @ts-ignore",
			"const ${1:juris} = new Juris();"
		],
		"description": "Create New Juris Instance"
	},
	"Register Juris Component": {
		"prefix": "jregcomp",
		"body": [
			"${1:juris}.registerComponent('${2:ComponentName}',${2:ComponentName});"
		],
		"description": "Register Juris Component"
	},
	"Render Juris": {
		"prefix": "jrender",
		"body": [
			"${1:juris}.render('${2:#app}');"
		],
		"description": "Render Juris"
	},
	"Juris Simple Counter": {
		"prefix": "jcounter",
		"body": [
			"{div: {",
			"    className: '${1:counter}',",
			"    children: [",
			"        {button: {text: '-', onClick: () => setState('${2:count}', (getState('${2:count}', 0) - 1))}}, //button",
			"        {span: {text: () => getState('${2:count}', 0)}}, //span",
			"        {button: {text: '+', onClick: () => setState('${2:count}', (getState('${2:count}', 0) + 1))}}, //button",
			"    ]",
			"}}, //div.${1:counter}"
		],
		"description": "Simple counter with increment/decrement buttons"
	},
	"Juris Counter with ClassName": {
		"prefix": "jcounter.",
		"body": [
			"{div: {",
			"    className: '${1:counter-widget}',",
			"    children: [",
			"        {button: {",
			"            className: '${2:btn-decrement}',",
			"            text: '-',",
			"            onClick: () => setState('${3:count}', (getState('${3:count}', 0) - 1))",
			"        }}, //button.${2:btn-decrement}",
			"        {span: {",
			"            className: '${4:count-display}',",
			"            text: () => getState('${3:count}', 0)",
			"        }}, //span.${4:count-display}",
			"        {button: {",
			"            className: '${5:btn-increment}',",
			"            text: '+',",
			"            onClick: () => setState('${3:count}', (getState('${3:count}', 0) + 1))",
			"        }}, //button.${5:btn-increment}",
			"    ]",
			"}}, //div.${1:counter-widget}"
		],
		"description": "Counter with custom className (use jcounter.classname)"
	},
	"Juris Counter with ID": {
		"prefix": "jcounter#",
		"body": [
			"{div: {",
			"    id: '${1:mainCounter}',",
			"    className: 'counter',",
			"    children: [",
			"        {button: {text: '-', onClick: () => setState('${2:count}', (getState('${2:count}', 0) - 1))}}, //button",
			"        {span: {text: () => getState('${2:count}', 0)}}, //span",
			"        {button: {text: '+', onClick: () => setState('${2:count}', (getState('${2:count}', 0) + 1))}}, //button",
			"    ]",
			"}}, //div#${1:mainCounter}"
		],
		"description": "Counter with ID (use jcounter#idname)"
	},
	"Juris Counter with Step": {
		"prefix": "jcounters",
		"body": [
			"{div: {",
			"    className: '${1:counter-stepped}',",
			"    children: [",
			"        {button: {",
			"            text: '-${2:5}',",
			"            onClick: () => setState('${3:count}', (getState('${3:count}', 0) - ${2:5}))",
			"        }}, //button",
			"        {span: {text: () => getState('${3:count}', 0)}}, //span",
			"        {button: {",
			"            text: '+${2:5}',",
			"            onClick: () => setState('${3:count}', (getState('${3:count}', 0) + ${2:5}))",
			"        }}, //button",
			"    ]",
			"}}, //div.${1:counter-stepped}"
		],
		"description": "Counter with custom step size"
	},
	"Juris Counter with Limits": {
		"prefix": "jcounterl",
		"body": [
			"{div: {",
			"    className: '${1:counter-limited}',",
			"    children: [",
			"        {button: {",
			"            text: '-',",
			"            disabled: () => getState('${2:count}', 0) <= ${3:0},",
			"            onClick: () => {",
			"                const current = getState('${2:count}', 0);",
			"                if (current > ${3:0}) setState('${2:count}', current - 1);",
			"            }",
			"        }}, //button",
			"        {span: {text: () => getState('${2:count}', 0)}}, //span",
			"        {button: {",
			"            text: '+',",
			"            disabled: () => getState('${2:count}', 0) >= ${4:10},",
			"            onClick: () => {",
			"                const current = getState('${2:count}', 0);",
			"                if (current < ${4:10}) setState('${2:count}', current + 1);",
			"            }",
			"        }}, //button",
			"    ]",
			"}}, //div.${1:counter-limited}"
		],
		"description": "Counter with min/max limits and disabled states"
	},
	"Juris Counter with Reset": {
		"prefix": "jcounterr",
		"body": [
			"{div: {",
			"    className: '${1:counter-reset}',",
			"    children: [",
			"        {button: {text: '-', onClick: () => setState('${2:count}', (getState('${2:count}', 0) - 1))}}, //button",
			"        {span: {text: () => getState('${2:count}', 0)}}, //span",
			"        {button: {text: '+', onClick: () => setState('${2:count}', (getState('${2:count}', 0) + 1))}}, //button",
			"        {button: {",
			"            text: '${3:Reset}',",
			"            className: '${4:btn-reset}',",
			"            onClick: () => setState('${2:count}', ${5:0})",
			"        }}, //button.${4:btn-reset}",
			"    ]",
			"}}, //div.${1:counter-reset}"
		],
		"description": "Counter with reset button"
	},
	"Juris Counter with Label": {
		"prefix": "jcounterl",
		"body": [
			"{div: {",
			"    className: '${1:counter-labeled}',",
			"    children: [",
			"        {label: {text: '${2:Count}: '}}, //label",
			"        {button: {text: '-', onClick: () => setState('${3:count}', (getState('${3:count}', 0) - 1))}}, //button",
			"        {span: {text: () => getState('${3:count}', 0)}}, //span",
			"        {button: {text: '+', onClick: () => setState('${3:count}', (getState('${3:count}', 0) + 1))}}, //button",
			"    ]",
			"}}, //div.${1:counter-labeled}"
		],
		"description": "Counter with descriptive label"
	},
	"Juris Advanced Counter": {
		"prefix": "jcountera",
		"body": [
			"{div: {",
			"    className: '${1:counter-advanced}',",
			"    children: [",
			"        {div: {",
			"            className: '${2:counter-header}',",
			"            children: [",
			"                {h3: {text: '${3:Counter Demo}'}}, //h3",
			"                {button: {",
			"                    text: '${4:Reset}',",
			"                    className: '${5:btn-reset}',",
			"                    onClick: () => setState('${6:count}', ${7:0})",
			"                }}, //button.${5:btn-reset}",
			"            ]",
			"        }}, //div.${2:counter-header}",
			"        {div: {",
			"            className: '${8:counter-controls}',",
			"            children: [",
			"                {button: {",
			"                    text: '--',",
			"                    className: '${9:btn-fast-dec}',",
			"                    onClick: () => setState('${6:count}', (getState('${6:count}', 0) - ${10:10}))",
			"                }}, //button.${9:btn-fast-dec}",
			"                {button: {",
			"                    text: '-',",
			"                    className: '${11:btn-dec}',",
			"                    onClick: () => setState('${6:count}', (getState('${6:count}', 0) - 1))",
			"                }}, //button.${11:btn-dec}",
			"                {div: {",
			"                    className: '${12:count-display}',",
			"                    text: () => getState('${6:count}', 0)",
			"                }}, //div.${12:count-display}",
			"                {button: {",
			"                    text: '+',",
			"                    className: '${13:btn-inc}',",
			"                    onClick: () => setState('${6:count}', (getState('${6:count}', 0) + 1))",
			"                }}, //button.${13:btn-inc}",
			"                {button: {",
			"                    text: '++',",
			"                    className: '${14:btn-fast-inc}',",
			"                    onClick: () => setState('${6:count}', (getState('${6:count}', 0) + ${10:10}))",
			"                }}, //button.${14:btn-fast-inc}",
			"            ]",
			"        }}, //div.${8:counter-controls}",
			"        {div: {",
			"            className: '${15:counter-info}',",
			"            children: [",
			"                {small: {text: () => `Current value: ${getState('${6:count}', 0)}`}}, //small",
			"            ]",
			"        }}, //div.${15:counter-info}",
			"    ]",
			"}}, //div.${1:counter-advanced}"
		],
		"description": "Advanced counter with multiple speeds, header, and info display"
	},
	"Juris Counter Component": {
		"prefix": "jcountercomp",
		"body": [
			"/**",
			" * @param {Object} props",
			" * @param {JurisContextBase} context",
			" * @returns {JurisVDOMElement}",
			" */",
			"const ${1:Counter} = (props, context) => {",
			"    const { getState, setState } = context;",
			"    const { ",
			"        initialValue = 0,",
			"        step = 1,",
			"        min,",
			"        max,",
			"        label = 'Count',",
			"        showReset = true,",
			"        statePath = '${2:count}'",
			"    } = props;",
			"    ",
			"    const increment = () => {",
			"        const current = getState(statePath, initialValue);",
			"        const newValue = current + step;",
			"        if (max === undefined || newValue <= max) {",
			"            setState(statePath, newValue);",
			"        }",
			"    };",
			"    ",
			"    const decrement = () => {",
			"        const current = getState(statePath, initialValue);",
			"        const newValue = current - step;",
			"        if (min === undefined || newValue >= min) {",
			"            setState(statePath, newValue);",
			"        }",
			"    };",
			"    ",
			"    const reset = () => setState(statePath, initialValue);",
			"    ",
			"    return {",
			"        ${3:div}: {",
			"            className: '${4:counter-component}',",
			"            children: [",
			"                ...(label ? [{label: {text: `${label}: `}}] : []), //label",
			"                {button: {",
			"                    text: '-',",
			"                    disabled: () => {",
			"                        const current = getState(statePath, initialValue);",
			"                        return min !== undefined && current <= min;",
			"                    },",
			"                    onClick: decrement",
			"                }}, //button",
			"                {span: {",
			"                    className: '${5:count-value}',",
			"                    text: () => getState(statePath, initialValue)",
			"                }}, //span.${5:count-value}",
			"                {button: {",
			"                    text: '+',",
			"                    disabled: () => {",
			"                        const current = getState(statePath, initialValue);",
			"                        return max !== undefined && current >= max;",
			"                    },",
			"                    onClick: increment",
			"                }}, //button",
			"                ...(showReset ? [{button: {text: 'Reset', onClick: reset}}] : []), //button",
			"            ]",
			"        }, //${3:div}.${4:counter-component}",
			"    };",
			"};"
		],
		"description": "Complete counter component with props and JSDoc"
	},
	"Juris Counter with Input": {
		"prefix": "jcounteri",
		"body": [
			"{div: {",
			"    className: '${1:counter-input}',",
			"    children: [",
			"        {button: {text: '-', onClick: () => setState('${2:count}', (getState('${2:count}', 0) - 1))}}, //button",
			"        {input: {",
			"            type: 'number',",
			"            className: '${3:count-input}',",
			"            value: () => getState('${2:count}', 0),",
			"            onInput: (e) => setState('${2:count}', parseInt(e.target.value) || 0)",
			"        }}, //input.${3:count-input}",
			"        {button: {text: '+', onClick: () => setState('${2:count}', (getState('${2:count}', 0) + 1))}}, //button",
			"    ]",
			"}}, //div.${1:counter-input}"
		],
		"description": "Counter with editable number input"
	},
	"Juris Counter Vertical": {
		"prefix": "jcounterv",
		"body": [
			"{div: {",
			"    className: '${1:counter-vertical}',",
			"    children: [",
			"        {button: {",
			"            text: '+',",
			"            className: '${2:btn-up}',",
			"            onClick: () => setState('${3:count}', (getState('${3:count}', 0) + 1))",
			"        }}, //button.${2:btn-up}",
			"        {div: {",
			"            className: '${4:count-display}',",
			"            text: () => getState('${3:count}', 0)",
			"        }}, //div.${4:count-display}",
			"        {button: {",
			"            text: '-',",
			"            className: '${5:btn-down}',",
			"            onClick: () => setState('${3:count}', (getState('${3:count}', 0) - 1))",
			"        }}, //button.${5:btn-down}",
			"    ]",
			"}}, //div.${1:counter-vertical}"
		],
		"description": "Vertical counter layout with up/down buttons"
	},
	"Create Component Setter/Getter": {
		"prefix": "jgetset",
		"body": [
			"const [get${1:Var}, set${1:Var}] = [() => getState('${2:variable}', 0), (newValue) => setState('${2:variable}', newValue)];"
		],
		"description": "Create Component Setter/Getter"
	}
}